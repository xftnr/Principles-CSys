                            | #######################################################################
                            | # Test for copying block of size 63;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f43806000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f23f00000000000000 | 	irmovq $63, %rdx		# src and dst have 63 elements
0x014: 30f6b803000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f7b001000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | # Name:Pengdi Xia
                            | # EID:px353
                            | # Describe how and why you modified the baseline code.
                            | # I use the iaddq to void use the 2 register and cause the hazard
                            | # 
                            | 
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
0x032: 6300                 | 	xorq 	%rax,%rax	# count = 0;
0x034: 2021                 | 	rrmovq	%rdx,%rcx
0x036: c0f1fbffffffffffffff | 	iaddq	$-5,%rcx	# determine there are more than
                            | 				# 8 elements in src
0x040: 724701000000000000   | 	jl 	Mid		
                            | 
0x049:                      | loop5:
0x049: 50870000000000000000 | 	mrmovq 	(%rdi), %r8	# computer 8 src first
0x053: 50970800000000000000 |         mrmovq 	8(%rdi), %r9
0x05d: 50a71000000000000000 |         mrmovq 	16(%rdi), %r10
0x067: 50b71800000000000000 |         mrmovq 	24(%rdi), %r11
0x071: 50c72000000000000000 |         mrmovq 	32(%rdi), %r12
0x07b: 40860000000000000000 |         rmmovq 	%r8, (%rsi)	# save this 8 src to dst
0x085: 40960800000000000000 |         rmmovq 	%r9, 8(%rsi)
0x08f: 40a61000000000000000 |         rmmovq 	%r10, 16(%rsi)
0x099: 40b61800000000000000 |         rmmovq 	%r11, 24(%rsi)
0x0a3: 40c62000000000000000 |         rmmovq 	%r12, 32(%rsi)
                            | 
0x0ad: 6288                 | r8:   andq 	%r8, %r8     	# val <= 0?
0x0af: 71c200000000000000   |         jle 	r9:        	# determine the every element in src
0x0b8: c0f00100000000000000 |         iaddq 	$1, %rax      	# count++, %rax         
0x0c2: 6299                 | r9:   andq 	%r9, %r9          
0x0c4: 71d700000000000000   |         jle 	r10:
0x0cd: c0f00100000000000000 |         iaddq 	$1, %rax
0x0d7: 62aa                 | r10:   andq 	%r10, %r10
0x0d9: 71ec00000000000000   |         jle 	r11:
0x0e2: c0f00100000000000000 |         iaddq 	$1, %rax
0x0ec: 62bb                 | r11:   andq 	%r11, %r11
0x0ee: 710101000000000000   |         jle 	r12:
0x0f7: c0f00100000000000000 |         iaddq 	$1, %rax
0x101: 62cc                 | r12:   andq 	%r12, %r12
0x103: 711601000000000000   |         jle 	Npos5:
0x10c: c0f00100000000000000 |         iaddq 	$1, %rax
                            | 
0x116: c0f72800000000000000 | Npos5:	iaddq	$40,%rdi	# src++
0x120: c0f62800000000000000 | 	iaddq 	$40,%rsi	# dst++
0x12a: c0f2fbffffffffffffff | 	iaddq	$-5,%rdx
0x134: c0f1fbffffffffffffff | 	iaddq	$-5,%rcx
0x13e: 754900000000000000   | 	jge	loop5		# if there are still more than 8 elemets
                            | 
0x147: 6222                 | Mid:	andq 	%rdx,%rdx	# len<=0
0x149: 71ac01000000000000   | 	jle	Done		# 
                            | 
0x152: 50d70000000000000000 | Loop:	mrmovq 	(%rdi), %r13	# read val from src...
0x15c: 50e70800000000000000 | 	mrmovq	8(%rdi),%r14
0x166: 40d60000000000000000 | 	rmmovq 	%r13, (%rsi)	# ...and store it to dst
0x170: 62dd                 | 	andq 	%r13,%r13	# val <= 0?
0x172: 718501000000000000   | 	jle 	Npos		# if so, goto Npos:
0x17b: c0f00100000000000000 | 	iaddq 	$1, %rax	# count++
                            | 		
0x185: c0f70800000000000000 | Npos:	iaddq 	$8, %rdi	# src++
0x18f: c0f60800000000000000 | 	iaddq 	$8, %rsi	# dst++
0x199: c0f2ffffffffffffffff | 	iaddq 	$-1,%rdx	# len > 0?
0x1a3: 765201000000000000   | 	jg Loop			# if so, goto Loop:
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x1ac:                      | Done:
0x1ac: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x1ad:                      | End:
                            | #/* $end ncopy-ys */
0x1ad:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x1b0:                      | 	.align 8
0x1b0:                      | src:
0x1b0: 0100000000000000     | 	.quad 1
0x1b8: feffffffffffffff     | 	.quad -2
0x1c0: fdffffffffffffff     | 	.quad -3
0x1c8: 0400000000000000     | 	.quad 4
0x1d0: fbffffffffffffff     | 	.quad -5
0x1d8: 0600000000000000     | 	.quad 6
0x1e0: 0700000000000000     | 	.quad 7
0x1e8: f8ffffffffffffff     | 	.quad -8
0x1f0: f7ffffffffffffff     | 	.quad -9
0x1f8: f6ffffffffffffff     | 	.quad -10
0x200: f5ffffffffffffff     | 	.quad -11
0x208: 0c00000000000000     | 	.quad 12
0x210: f3ffffffffffffff     | 	.quad -13
0x218: f2ffffffffffffff     | 	.quad -14
0x220: f1ffffffffffffff     | 	.quad -15
0x228: 1000000000000000     | 	.quad 16
0x230: efffffffffffffff     | 	.quad -17
0x238: 1200000000000000     | 	.quad 18
0x240: edffffffffffffff     | 	.quad -19
0x248: 1400000000000000     | 	.quad 20
0x250: 1500000000000000     | 	.quad 21
0x258: 1600000000000000     | 	.quad 22
0x260: 1700000000000000     | 	.quad 23
0x268: 1800000000000000     | 	.quad 24
0x270: e7ffffffffffffff     | 	.quad -25
0x278: e6ffffffffffffff     | 	.quad -26
0x280: 1b00000000000000     | 	.quad 27
0x288: e4ffffffffffffff     | 	.quad -28
0x290: e3ffffffffffffff     | 	.quad -29
0x298: 1e00000000000000     | 	.quad 30
0x2a0: e1ffffffffffffff     | 	.quad -31
0x2a8: e0ffffffffffffff     | 	.quad -32
0x2b0: 2100000000000000     | 	.quad 33
0x2b8: deffffffffffffff     | 	.quad -34
0x2c0: ddffffffffffffff     | 	.quad -35
0x2c8: dcffffffffffffff     | 	.quad -36
0x2d0: dbffffffffffffff     | 	.quad -37
0x2d8: daffffffffffffff     | 	.quad -38
0x2e0: 2700000000000000     | 	.quad 39
0x2e8: 2800000000000000     | 	.quad 40
0x2f0: 2900000000000000     | 	.quad 41
0x2f8: d6ffffffffffffff     | 	.quad -42
0x300: d5ffffffffffffff     | 	.quad -43
0x308: 2c00000000000000     | 	.quad 44
0x310: d3ffffffffffffff     | 	.quad -45
0x318: 2e00000000000000     | 	.quad 46
0x320: 2f00000000000000     | 	.quad 47
0x328: d0ffffffffffffff     | 	.quad -48
0x330: 3100000000000000     | 	.quad 49
0x338: 3200000000000000     | 	.quad 50
0x340: 3300000000000000     | 	.quad 51
0x348: 3400000000000000     | 	.quad 52
0x350: cbffffffffffffff     | 	.quad -53
0x358: 3600000000000000     | 	.quad 54
0x360: 3700000000000000     | 	.quad 55
0x368: c8ffffffffffffff     | 	.quad -56
0x370: c7ffffffffffffff     | 	.quad -57
0x378: c6ffffffffffffff     | 	.quad -58
0x380: 3b00000000000000     | 	.quad 59
0x388: c4ffffffffffffff     | 	.quad -60
0x390: 3d00000000000000     | 	.quad 61
0x398: 3e00000000000000     | 	.quad 62
0x3a0: 3f00000000000000     | 	.quad 63
0x3a8: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x3b0:                      | 	.align 16
0x3b0:                      | Predest:
0x3b0: fadebc0000000000     | 	.quad 0xbcdefa
0x3b8:                      | dest:
0x3b8: abefcd0000000000     | 	.quad 0xcdefab
0x3c0: abefcd0000000000     | 	.quad 0xcdefab
0x3c8: abefcd0000000000     | 	.quad 0xcdefab
0x3d0: abefcd0000000000     | 	.quad 0xcdefab
0x3d8: abefcd0000000000     | 	.quad 0xcdefab
0x3e0: abefcd0000000000     | 	.quad 0xcdefab
0x3e8: abefcd0000000000     | 	.quad 0xcdefab
0x3f0: abefcd0000000000     | 	.quad 0xcdefab
0x3f8: abefcd0000000000     | 	.quad 0xcdefab
0x400: abefcd0000000000     | 	.quad 0xcdefab
0x408: abefcd0000000000     | 	.quad 0xcdefab
0x410: abefcd0000000000     | 	.quad 0xcdefab
0x418: abefcd0000000000     | 	.quad 0xcdefab
0x420: abefcd0000000000     | 	.quad 0xcdefab
0x428: abefcd0000000000     | 	.quad 0xcdefab
0x430: abefcd0000000000     | 	.quad 0xcdefab
0x438: abefcd0000000000     | 	.quad 0xcdefab
0x440: abefcd0000000000     | 	.quad 0xcdefab
0x448: abefcd0000000000     | 	.quad 0xcdefab
0x450: abefcd0000000000     | 	.quad 0xcdefab
0x458: abefcd0000000000     | 	.quad 0xcdefab
0x460: abefcd0000000000     | 	.quad 0xcdefab
0x468: abefcd0000000000     | 	.quad 0xcdefab
0x470: abefcd0000000000     | 	.quad 0xcdefab
0x478: abefcd0000000000     | 	.quad 0xcdefab
0x480: abefcd0000000000     | 	.quad 0xcdefab
0x488: abefcd0000000000     | 	.quad 0xcdefab
0x490: abefcd0000000000     | 	.quad 0xcdefab
0x498: abefcd0000000000     | 	.quad 0xcdefab
0x4a0: abefcd0000000000     | 	.quad 0xcdefab
0x4a8: abefcd0000000000     | 	.quad 0xcdefab
0x4b0: abefcd0000000000     | 	.quad 0xcdefab
0x4b8: abefcd0000000000     | 	.quad 0xcdefab
0x4c0: abefcd0000000000     | 	.quad 0xcdefab
0x4c8: abefcd0000000000     | 	.quad 0xcdefab
0x4d0: abefcd0000000000     | 	.quad 0xcdefab
0x4d8: abefcd0000000000     | 	.quad 0xcdefab
0x4e0: abefcd0000000000     | 	.quad 0xcdefab
0x4e8: abefcd0000000000     | 	.quad 0xcdefab
0x4f0: abefcd0000000000     | 	.quad 0xcdefab
0x4f8: abefcd0000000000     | 	.quad 0xcdefab
0x500: abefcd0000000000     | 	.quad 0xcdefab
0x508: abefcd0000000000     | 	.quad 0xcdefab
0x510: abefcd0000000000     | 	.quad 0xcdefab
0x518: abefcd0000000000     | 	.quad 0xcdefab
0x520: abefcd0000000000     | 	.quad 0xcdefab
0x528: abefcd0000000000     | 	.quad 0xcdefab
0x530: abefcd0000000000     | 	.quad 0xcdefab
0x538: abefcd0000000000     | 	.quad 0xcdefab
0x540: abefcd0000000000     | 	.quad 0xcdefab
0x548: abefcd0000000000     | 	.quad 0xcdefab
0x550: abefcd0000000000     | 	.quad 0xcdefab
0x558: abefcd0000000000     | 	.quad 0xcdefab
0x560: abefcd0000000000     | 	.quad 0xcdefab
0x568: abefcd0000000000     | 	.quad 0xcdefab
0x570: abefcd0000000000     | 	.quad 0xcdefab
0x578: abefcd0000000000     | 	.quad 0xcdefab
0x580: abefcd0000000000     | 	.quad 0xcdefab
0x588: abefcd0000000000     | 	.quad 0xcdefab
0x590: abefcd0000000000     | 	.quad 0xcdefab
0x598: abefcd0000000000     | 	.quad 0xcdefab
0x5a0: abefcd0000000000     | 	.quad 0xcdefab
0x5a8: abefcd0000000000     | 	.quad 0xcdefab
0x5b0:                      | Postdest:
0x5b0: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x5b8:                      | .align 8
                            | # Run time stack
0x5b8: 0000000000000000     | 	.quad 0
0x5c0: 0000000000000000     | 	.quad 0
0x5c8: 0000000000000000     | 	.quad 0
0x5d0: 0000000000000000     | 	.quad 0
0x5d8: 0000000000000000     | 	.quad 0
0x5e0: 0000000000000000     | 	.quad 0
0x5e8: 0000000000000000     | 	.quad 0
0x5f0: 0000000000000000     | 	.quad 0
0x5f8: 0000000000000000     | 	.quad 0
0x600: 0000000000000000     | 	.quad 0
0x608: 0000000000000000     | 	.quad 0
0x610: 0000000000000000     | 	.quad 0
0x618: 0000000000000000     | 	.quad 0
0x620: 0000000000000000     | 	.quad 0
0x628: 0000000000000000     | 	.quad 0
0x630: 0000000000000000     | 	.quad 0
                            | 
0x638:                      | Stack:
