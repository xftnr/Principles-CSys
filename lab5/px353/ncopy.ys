#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
# Name:Pengdi Xia
# EID:px353
# Describe how and why you modified the baseline code.
#
# First, I use the iaddq instructment
# Second, since there are 5 stage in y86 pipeline, I use pull out
# five elements in the list and store in 5 different register.
# After five move in register, the first date have been writen back
# to the register. So I could use it copy to dest without bubble.
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header
	xorq 	%rax,%rax	# count = 0;
	rrmovq	%rdx,%rcx
	iaddq	$-5,%rcx	# determine there are more than
				# 5 elements in src
	jl 	Mid		

loop5:
	mrmovq 	(%rdi), %r8	# computer 5 src first
        mrmovq 	8(%rdi), %r9
        mrmovq 	16(%rdi), %r10
        mrmovq 	24(%rdi), %r11
        mrmovq 	32(%rdi), %r12
        rmmovq 	%r8, (%rsi)	# save this 5 src to dst
        rmmovq 	%r9, 8(%rsi)
        rmmovq 	%r10, 16(%rsi)
        rmmovq 	%r11, 24(%rsi)
        rmmovq 	%r12, 32(%rsi)

r8:   andq 	%r8, %r8     	# val <= 0?
        jle 	r9:        	# determine the every element in src
        iaddq 	$1, %rax      	# count++, %rax         
r9:   andq 	%r9, %r9          
        jle 	r10:
        iaddq 	$1, %rax
r10:   andq 	%r10, %r10
        jle 	r11:
        iaddq 	$1, %rax
r11:   andq 	%r11, %r11
        jle 	r12:
        iaddq 	$1, %rax
r12:   andq 	%r12, %r12
        jle 	Npos5:
        iaddq 	$1, %rax

Npos5:	iaddq	$40,%rdi	# src++
	iaddq 	$40,%rsi	# dst++
	iaddq	$-5,%rdx
	iaddq	$-5,%rcx
	jge	loop5		# if there are still more than 5 elemets

Mid:	andq 	%rdx,%rdx	# len<=0
	jle	Done		# 

Loop:	mrmovq 	(%rdi), %r13	# read val from src...
	mrmovq	8(%rdi),%r14
	rmmovq 	%r13, (%rsi)	# ...and store it to dst
	andq 	%r13,%r13	# val <= 0?
	jle 	Npos		# if so, goto Npos:
	iaddq 	$1, %rax	# count++
		
Npos:	iaddq 	$8, %rdi	# src++
	iaddq 	$8, %rsi	# dst++
	iaddq 	$-1,%rdx	# len > 0?
	jg Loop			# if so, goto Loop:
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
