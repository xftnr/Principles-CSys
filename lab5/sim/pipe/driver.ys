#######################################################################
# Test for copying block of size 4;
#######################################################################
	.pos 0
main:	irmovq Stack, %rsp  	# Set up stack pointer

	# Set up arguments for copy function and then invoke it
	irmovq $4, %rdx		# src and dst have 4 elements
	irmovq dest, %rsi	# dst array
	irmovq src, %rdi	# src array
	call ncopy		 
	call check	        # Call checker code
	halt                    # should halt with 0xaaaa in %rax
StartFun:
#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
# Name:Pengdi Xia
# EID:px353
# Describe how and why you modified the baseline code.
# I use the iaddq to void use the 2 register and cause the hazard
# 

##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header
	xorq 	%rax,%rax	# count = 0;
	rrmovq	%rdx,%rcx
	iaddq	$-8,%rcx	# determine there are more than
				# 8 elements in src
	jle 	Mid4		

loop8:
	mrmovq 	(%rdi), %r8	# computer 8 src first
        mrmovq 	8(%rdi), %r9
        mrmovq 	16(%rdi), %r10
        mrmovq 	24(%rdi), %r11
        mrmovq 	32(%rdi), %r12
        mrmovq 	40(%rdi), %r13
        mrmovq 	48(%rdi), %r14
        mrmovq 	56(%rdi), %rbx
        rmmovq 	%r8, (%rsi)	# save this 8 src to dst
        rmmovq 	%r9, 8(%rsi)
        rmmovq 	%r10, 16(%rsi)
        rmmovq 	%r11, 24(%rsi)
        rmmovq 	%r12, 32(%rsi)
        rmmovq 	%r13, 40(%rsi)
        rmmovq 	%r14, 48(%rsi)
        rmmovq 	%rbx, 56(%rsi)

r8:   andq 	%r8, %r8     	# val <= 0?
        jle 	r9:        	# determine the every element in src
        iaddq 	$1, %rax      	# count++, %rax         
r9:   andq 	%r9, %r9          
        jle 	r10:
        iaddq 	$1, %rax
r10:   andq 	%r10, %r10
        jle 	r11:
        iaddq 	$1, %rax
r11:   andq 	%r11, %r11
        jle 	r12:
        iaddq 	$1, %rax
r12:   andq 	%r12, %r12
        jle 	r13:
        iaddq 	$1, %rax
r13:   andq 	%r13, %r13
        jle 	r14:
        iaddq 	$1, %rax
r14:   andq 	%r14, %r14
        jle 	rbx:
        iaddq 	$1, %rax
rbx:   andq 	%rbx, %rbx
        jle 	Npos8:
        iaddq 	$1, %rax

Npos8:	iaddq	$64,%rdi	# src++
	iaddq 	$64,%rsi	# dst++
	iaddq	$-8,%rdx
	iaddq	$-8,%rcx
	jg	loop8	# if there are still more than 8 elemets

Mid4:	rrmovq	%rdx,%r12
	iaddq	$-4,%r12	# len<=0?
	jle	Mid		# len>4

loop4:	mrmovq (%rdi), %r8
        mrmovq 8(%rdi), %r9
        mrmovq 16(%rdi), %r10
        mrmovq 24(%rdi), %r11
        rmmovq %r8, (%rsi)
        rmmovq %r9, 8(%rsi)
        rmmovq %r10, 16(%rsi)
        rmmovq %r11, 24(%rsi)

r8:   	andq 	%r8, %r8     	# val <= 0?
        jle 	r9:        	# determine the every element in src
        iaddq 	$1, %rax      	# count++, %rax         
r9:  	andq 	%r9, %r9          
        jle 	r10:
        iaddq 	$1, %rax
r10:  	andq 	%r10, %r10
        jle 	r11:
        iaddq 	$1, %rax
r11:  	andq 	%r11, %r11
        jle 	Npos4:
        iaddq 	$1, %rax

Npos4:	iaddq	$32,%rdi	# src++
	iaddq 	$32,%rsi	# dst++
	iaddq	$-4,%rdx
	iaddq	$-4,%r12
	jg	loop4		# if there are still more than 4 elemets

Mid:	andq 	%rdx,%rdx	# len<=0
	jle	Done		# 

Loop:	mrmovq 	(%rdi), %r8	# read val from src...
	rmmovq 	%r8, (%rsi)	# ...and store it to dst
	andq 	%r8,%r8		# val <= 0?
	jle 	Npos		# if so, goto Npos:
	iaddq 	$1, %rax	# count++

Npos:	iaddq 	$8, %rdi	# src++
	iaddq 	$8, %rsi	# dst++
	iaddq 	$-1,%rdx	# len > 0?
	jg Loop			# if so, goto Loop:
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
EndFun:
#################################################################### 
# Epilogue code for the correctness testing driver
####################################################################

# This is the correctness checking code.
# It checks:
#   1. %rax has 1.  Set %rax to 0xbbbb if not.
#   2. The total length of the code is less than or equal to 1000.
#      Set %rax to 0xcccc if not.
#   3. The source data was copied to the destination.
#      Set %rax to 0xdddd if not.
#   4. The words just before and just after the destination region
#      were not corrupted.  Set %rax to 0xeeee if not.
# If all checks pass, then sets %rax to 0xaaaa
check:
	# Return value test
	irmovq $1,%r10
	subq %r10,%rax
	je checkb
	irmovq $0xbbbb,%rax  # Failed test #1
	jmp cdone
checkb:
	# Code length check
	irmovq EndFun,%rax
	irmovq StartFun,%rdx
	subq %rdx,%rax
	irmovq $1000,%rdx
	subq %rax,%rdx
	jge checkm
	irmovq $0xcccc,%rax  # Failed test #2
	jmp cdone
checkm:
	irmovq dest, %rdx # Pointer to next destination location
	irmovq src,%rbx   # Pointer to next source location
	irmovq $4,%rdi  # Count
	andq %rdi,%rdi
	je checkpre         # Skip check if count = 0
mcloop:
	mrmovq (%rdx),%rax
	mrmovq (%rbx),%rsi
	subq %rsi,%rax
	je  mok
	irmovq $0xdddd,%rax # Failed test #3
	jmp cdone
mok:
	irmovq $8,%rax
	addq %rax,%rdx	  # dest ++
	addq %rax,%rbx    # src++
	irmovq $1,%rax
	subq %rax,%rdi    # cnt--
	jg mcloop
checkpre:
	# Check for corruption
	irmovq Predest,%rdx
	mrmovq (%rdx), %rax  # Get word before destination
	irmovq $0xbcdefa, %rdx
	subq %rdx,%rax
	je checkpost
	irmovq $0xeeee,%rax  # Failed test #4
	jmp cdone
checkpost:
	# Check for corruption
	irmovq Postdest,%rdx
	mrmovq (%rdx), %rax  # Get word after destination
	irmovq $0xdefabc, %rdx
	subq %rdx,%rax
	je checkok
	irmovq $0xeeee,%rax # Failed test #4
	jmp cdone
checkok:
	# Successful checks
	irmovq $0xaaaa,%rax
cdone:
	ret

###############################
# Source and destination blocks 
###############################
	.align 8
src:
	.quad 1
	.quad -2
	.quad -3
	.quad -4
	.quad 0xbcdefa # This shouldn't get moved

	.align 16
Predest:
	.quad 0xbcdefa
dest:
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
Postdest:
	.quad 0xdefabc

.align 8
# Run time stack
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0

Stack:
