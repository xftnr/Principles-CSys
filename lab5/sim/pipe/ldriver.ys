#######################################################################
# Test for copying block of size 63;
#######################################################################
	.pos 0
main:	irmovq Stack, %rsp  	# Set up stack pointer

	# Set up arguments for copy function and then invoke it
	irmovq $63, %rdx		# src and dst have 63 elements
	irmovq dest, %rsi	# dst array
	irmovq src, %rdi	# src array
	call ncopy		 
	halt			# should halt with num nonzeros in %rax
StartFun:
#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
# Name:Pengdi Xia
# EID:px353
# Describe how and why you modified the baseline code.
# I use the iaddq to void use the 2 register and cause the hazard
# 

##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header
	xorq 	%rax,%rax	# count = 0;
	rrmovq	%rdx,%rcx
	iaddq	$-5,%rcx	# determine there are more than
				# 8 elements in src
	jl 	Mid		

loop5:
	mrmovq 	(%rdi), %r8	# computer 8 src first
        mrmovq 	8(%rdi), %r9
        mrmovq 	16(%rdi), %r10
        mrmovq 	24(%rdi), %r11
        mrmovq 	32(%rdi), %r12
        rmmovq 	%r8, (%rsi)	# save this 8 src to dst
        rmmovq 	%r9, 8(%rsi)
        rmmovq 	%r10, 16(%rsi)
        rmmovq 	%r11, 24(%rsi)
        rmmovq 	%r12, 32(%rsi)

r8:   andq 	%r8, %r8     	# val <= 0?
        jle 	r9:        	# determine the every element in src
        iaddq 	$1, %rax      	# count++, %rax         
r9:   andq 	%r9, %r9          
        jle 	r10:
        iaddq 	$1, %rax
r10:   andq 	%r10, %r10
        jle 	r11:
        iaddq 	$1, %rax
r11:   andq 	%r11, %r11
        jle 	r12:
        iaddq 	$1, %rax
r12:   andq 	%r12, %r12
        jle 	Npos5:
        iaddq 	$1, %rax

Npos5:	iaddq	$40,%rdi	# src++
	iaddq 	$40,%rsi	# dst++
	iaddq	$-5,%rdx
	iaddq	$-5,%rcx
	jg	loop5		# if there are still more than 8 elemets

Mid:	andq 	%rdx,%rdx	# len<=0
	jle	Done		# 

Loop:	mrmovq 	(%rdi), %r13	# read val from src...
	mrmovq	8(%rdi),%r14
	rmmovq 	%r13, (%rsi)	# ...and store it to dst
	andq 	%r13,%r13	# val <= 0?
	jle 	Npos		# if so, goto Npos:
	iaddq 	$1, %rax	# count++
		
Npos:	iaddq 	$8, %rdi	# src++
	iaddq 	$8, %rsi	# dst++
	iaddq 	$-1,%rdx	# len > 0?
	jg Loop			# if so, goto Loop:
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
EndFun:

###############################
# Source and destination blocks 
###############################
	.align 8
src:
	.quad -1
	.quad 2
	.quad -3
	.quad 4
	.quad 5
	.quad -6
	.quad 7
	.quad -8
	.quad 9
	.quad 10
	.quad 11
	.quad -12
	.quad 13
	.quad 14
	.quad 15
	.quad -16
	.quad -17
	.quad -18
	.quad -19
	.quad -20
	.quad -21
	.quad 22
	.quad 23
	.quad -24
	.quad -25
	.quad -26
	.quad -27
	.quad -28
	.quad -29
	.quad -30
	.quad 31
	.quad 32
	.quad -33
	.quad -34
	.quad 35
	.quad 36
	.quad 37
	.quad 38
	.quad 39
	.quad 40
	.quad -41
	.quad 42
	.quad 43
	.quad 44
	.quad -45
	.quad 46
	.quad 47
	.quad 48
	.quad -49
	.quad 50
	.quad 51
	.quad -52
	.quad -53
	.quad 54
	.quad -55
	.quad 56
	.quad 57
	.quad -58
	.quad -59
	.quad -60
	.quad -61
	.quad -62
	.quad -63
	.quad 0xbcdefa # This shouldn't get moved

	.align 16
Predest:
	.quad 0xbcdefa
dest:
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
Postdest:
	.quad 0xdefabc

.align 8
# Run time stack
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0

Stack:
